#libraries used for port scanning
import threading
import socket
import concurrent.futures

#libraries used for identifying technology
import builtwith

#libraries used for getting SSL cert
# import socket
import ssl
import pprint

import pyfiglet
import sys
from datetime import datetime  

ascii_banner = pyfiglet.figlet_format("WEBSITE VULNERBILITY SCANNER")
print(ascii_banner)

url = input('please enter the url(google.com): ')
#vuln for banner grabbing
# url = 'www.itsecgames.com'
# url = 'google-gruyere.appspot.com/'
#url = 'thisislegal.com'

print("-" * 50)
print("Scanning Target: " + url)
print("Scanning started at:" + str(datetime.now()))
print("-" * 50)


#function for port sacnning 
def portscan(port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(2)
        try:
            con = s.connect((url,port))
            # banner  = s.recv(1024)
            print(f'Port {port} is open')
            # print(f'Port {port} is open. Banner: {banner.decode("utf-8").strip()}')
            con.close()
        except: 
            pass

def grabbanner(port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(2)
        try:
            con = s.connect((url,port))
            banner  = s.recv(1024)
            #print(f'Port {port} is open')
            print(f'Port {port} is open. Banner: {banner.decode("utf-8").strip()}')
            con.close()
        except: 
            pass

#function to identify technology in a website
def identifytech(tar):
   value = builtwith.builtwith(tar)
   for tech_group , tech_list in value.items():
        print(f"\n{tech_group}")
        for tech in tech_list:
            print(f"  -  {tech}")

#function to get ssl certificate
def getsslcert():
    context = ssl.create_default_context()
    
    with socket.create_connection((url , 443)) as sock:
     with context.wrap_socket(sock , server_hostname = url) as ssock:
        print(f'\nSSL/TLS certificate details of website {url} : ')
        print('version used: ' + ssock.version())
        pprint.pprint(ssock.getpeercert())
        

try:
 while(True):
    print('''
      1. Port scanning
      2. Banner grabbing
      3. Identify technology used
      4. Show ssl certificate
      5. Close''')
    option = int(input('\nEnter the number : '))
    print('-'*55)
    if(option == 1):
     max_threads = 500
     with concurrent.futures.ThreadPoolExecutor(max_threads) as executor:
        ports = range(1, 1000)
        executor.map(portscan, ports)
     print('-'*55)
    elif(option == 2):
       max_threads = 500
       with concurrent.futures.ThreadPoolExecutor(max_threads) as executor:
         ports = range(1, 1000)
         executor.map(grabbanner, ports)
       print('-'*55)    
    elif(option == 3):
       identifytech('https://' + url)
       print('-'*55)
    elif(option == 4):
       getsslcert()
       print('-'*55)
    elif(option == 5):
       sys.exit()
except KeyboardInterrupt:
		print("\n Exiting Program !!")
		sys.exit()
except socket.gaierror:
		print("\n Hostname Could Not Be Resolved !!")
		sys.exit()
except socket.error:
		print("\n Server not responding !!")
		sys.exit()
except:
     sys.exit()